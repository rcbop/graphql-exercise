{
	"info": {
		"_postman_id": "92cdd88e-6008-4239-a589-7e35082fa8fc",
		"name": "graph-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "root",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be in JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "graphql mutation signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be in JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response should contain data field\", function () {",
							"    pm.expect(pm.response.json().data).to.exist;",
							"});",
							"",
							"pm.test(\"Response data should contain signup field\", function () {",
							"    pm.expect(pm.response.json().data.signup).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n    signup(email: \"john.doe@email.com\", password: \"mypassword123\")\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:8000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "graphql mutation login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var body = pm.response.json();",
							"",
							"pm.globals.set(\"access_token\", body.data.login.accessToken);",
							"pm.globals.set(\"refresh_token\", body.data.login.refreshToken);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be in JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response should contain an accessToken\", function () {",
							"    pm.expect(pm.response.json().data.login.accessToken).to.exist;",
							"});",
							"",
							"pm.test(\"Response should contain an refreshToken\", function () {",
							"    pm.expect(pm.response.json().data.login.refreshToken).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n    login(email: \"john.doe@email.com\", password: \"mypassword123\"){\n        ... on LoginSuccess {\n            accessToken\n            refreshToken\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:8000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "graphql query get auth user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be in JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response should contain an getAuthenticatedUser.email\", function () {",
							"    pm.expect(pm.response.json().data.getAuthenticatedUser.email).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default",
						"disabled": true
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\n  getAuthenticatedUser {\n    email\n  }\n}\n",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "graphql query users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be in JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response should contain data field\", function () {",
							"    pm.expect(pm.response.json().data).to.exist;",
							"});",
							"",
							"pm.test(\"Response data should contain users field\", function () {",
							"    pm.expect(pm.response.json().data.users).to.exist;",
							"});",
							"",
							"pm.test(\"Response data users should be an array\", function () {",
							"    pm.expect(pm.response.json().data.users).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each user should contain email field\", function () {",
							"    pm.response.json().data.users.forEach(function (user) {",
							"        pm.expect(user.email).to.exist;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default",
						"disabled": true
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\n  users {\n    email\n  }\n}\n",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "graphql query houses",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default",
						"disabled": true
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\n  houses {\n    street\n    city\n    persons {\n        name\n        age\n    }\n  }\n}\n",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "graphql query persons",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be in JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response data persons should be an array\", function () {",
							"    pm.expect(pm.response.json().data.persons).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each persons should contain name and age fields\", function () {",
							"    pm.response.json().data.persons.forEach(function (user) {",
							"        pm.expect(user.name).to.exist;",
							"        pm.expect(user.age).to.exist;",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default",
						"disabled": true
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\n  persons {\n    name\n    age\n  }\n}\n",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	]
}